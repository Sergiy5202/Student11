import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.metrics import (
    accuracy_score, precision_score, recall_score, f1_score,
    confusion_matrix, roc_curve, auc, classification_report
)

# 1. Завантаження даних
data = pd.read_csv("titanic.csv")  # Заміна "titanic.csv" на ваш шлях до файлу
display(data.head())

# 2. Попередня обробка даних
# Перевірка пропусків
sns.heatmap(data.isnull(), cbar=False, cmap='viridis')
plt.show()

# Заповнення пропусків
data['Age'].fillna(data['Age'].median(), inplace=True)
data.drop(['Cabin'], axis=1, inplace=True)

# Кодування категоріальних змінних
data = pd.get_dummies(data, drop_first=True)

# Аналіз цільової змінної
sns.countplot(x='Survived', data=data)
plt.show()

# 3. Розподіл даних
X = data.drop('Survived', axis=1)
y = data['Survived']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 4. Побудова моделі
# Логістична регресія
lr_model = LogisticRegression()
lr_model.fit(X_train, y_train)
y_pred_lr = lr_model.predict(X_test)

# Оцінка моделі
print("Logistic Regression Metrics:")
print(classification_report(y_test, y_pred_lr))

# Матриця плутанини
sns.heatmap(confusion_matrix(y_test, y_pred_lr), annot=True, fmt='d', cmap='Blues')
plt.title("Confusion Matrix - Logistic Regression")
plt.show()

# 5. Додаткові моделі
# Random Forest
rf_model = RandomForestClassifier()
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

print("Random Forest Metrics:")
print(classification_report(y_test, y_pred_rf))

# SVM
svc_model = SVC(probability=True)
svc_model.fit(X_train, y_train)
y_pred_svc = svc_model.predict(X_test)

print("SVM Metrics:")
print(classification_report(y_test, y_pred_svc))

# 6. Побудова ROC-кривих
for model, name in zip([lr_model, rf_model, svc_model], ['Logistic Regression', 'Random Forest', 'SVM']):
    y_prob = model.predict_proba(X_test)[:, 1] if hasattr(model, "predict_proba") else model.decision_function(X_test)
    fpr, tpr, _ = roc_curve(y_test, y_prob)
    plt.plot(fpr, tpr, label=f'{name} (AUC = {auc(fpr, tpr):.2f})')

plt.plot([0, 1], [0, 1], 'k--')
plt.xlabel("False Positive Rate")
plt.ylabel("True Positive Rate")
plt.title("ROC Curve")
plt.legend()
plt.show()
